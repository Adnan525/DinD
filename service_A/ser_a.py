import os
import time
import subprocess
import requests

# Create the shared directory
os.makedirs("/app/shared", exist_ok=True)
MAIN_PY_PATH = "/app/shared/main.py"

def send_request_to_service_b():
    print("Waiting for service-b to be ready...")
    # Wait for service-b to be up
    while True:
        try:
            response = requests.get("http://service-b:8000/health", timeout=2)
            if response.status_code == 200:
                print("Service-b is ready!")
                break
        except:
            print("Retrying connection to service-b...")
            time.sleep(2)

    # Send a message to service-b
    message = "Hello from Service A!"
    print(f"Sending message to service-b: {message}")
    
    response = requests.post(
        "http://service-b:8000/receive",
        json={"message": message}
    )
    
    # Get the response
    response_data = response.json()
    response_message = response_data.get("response", "No response")
    print(f"Received response: {response_message}")
    
    # Write response to a Python file
    with open(MAIN_PY_PATH, "w") as f:
        f.write(f"""
# This file was generated by service-a with the response from service-b
def main():
    {response_message}

if __name__ == "__main__":
    main()
""")
    print(f"Created Python file at {MAIN_PY_PATH}")
    print(f"Checking if directory exists: {os.path.exists('/app/shared')}")
    print(f"Directory contents: {os.listdir('/app/shared')}")
    
    try:
        print("Starting container C...")
        result = subprocess.run([
            "docker", "run", "--rm",
            "-v", "shared_vol:/app",
            "--name", "container-c",
            "python:3.9-alpine",
            "python", "/app/main.py"
        ], capture_output=True, text=True)
        print(f"Container C stdout: {result.stdout}")
        print(f"Container C stderr: {result.stderr}")
        print(f"Container C exit code: {result.returncode}")
        
    except subprocess.CalledProcessError as e:
        print(f"Error starting container C: {e}")
        print(f"Docker command output: {e.output if hasattr(e, 'output') else 'No output'}")
        
        print("Container C operation completed")

if __name__ == "__main__":
    print("Service A starting...")
    # Add a delay to ensure service-b is up
    time.sleep(5)
    send_request_to_service_b()